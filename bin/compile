#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

logger -p user.notice -t "slugc[$$]" "language_pack_java java_compile_start"

BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
# parse args
BUILD_DIR=$1
CACHE_DIR=$2
LOGGER_FLAGS=""

curl --silent --location http://heroku-jvm-common.s3.amazonaws.com/jvm-buildpack-common.tar.gz | tar xz
. bin/java

KEEP_M2_CACHE="true"

# create default system.properties for apps that had the jdk vendored in 
if [ -f ${CACHE_DIR}/.jdk/vendor ] && [ ! -f ${BUILD_DIR}/system.properties ]; then
  echo "java.runtime.version=1.6" > ${BUILD_DIR}/system.properties
fi

if [ -f ${CACHE_DIR}/system.properties ] && [ ! -f ${BUILD_DIR}/system.properties ]; then
  cp ${CACHE_DIR}/system.properties ${BUILD_DIR}/system.properties
fi

if [ ! -d $CACHE_DIR ]; then
  LOGGER_FLAGS="$LOGGER_FLAGS new_java_app"
  logger -p user.notice -t "slugc[$$]" "language_pack_java new_java_app"
  KEEP_M2_CACHE="false"
  if [ ! -f ${BUILD_DIR}/system.properties ]; then 
    echo "java.runtime.version=1.6" > ${BUILD_DIR}/system.properties; 
  fi
elif [ -f $CACHE_DIR/removeM2Cache ]; then
  KEEP_M2_CACHE="false"
fi

if [ "true" == $KEEP_M2_CACHE ]; then
  logger -p user.notice -t "slugc[$$]" "language_pack_java retain_m2_repo"
fi

#create the cache dir if it doesn't exist
mkdir -p $CACHE_DIR

# install JDK 
if [ -f ${BUILD_DIR}/system.properties ]; then
  logger -p user.notice -t "slugc[$$]" "language_pack_java download_jdk"
  LOGGER_FLAGS="$LOGGER_FLAGS download_jdk"
  javaVersion=$(detect_java_version ${BUILD_DIR})
  echo -n "-----> Installing OpenJDK ${javaVersion}..."
  install_java ${BUILD_DIR} ${javaVersion}
  jdk_overlay ${BUILD_DIR}
  echo "done"
  cp ${BUILD_DIR}/system.properties ${CACHE_DIR}/
fi

# change to cache dir to install maven & tomcat
cd $CACHE_DIR

TOMCAT_V="7.0.54"
TOMCAT_URL="http://apache.petsads.us/tomcat/tomcat-7/v${TOMCAT_V}/bin/apache-tomcat-${TOMCAT_V}.tar.gz"
if [ ! -d tomcat ]; then
  echo -n "-----> Installing Tomcat ${TOMCAT_V}..."
  curl --silent --location $TOMCAT_URL | tar xz
  mv apache-tomcat-${TOMCAT_V} $BUILD_DIR/tomcat
  rm -rf $BUILD_DIR/tomcat/webapps/*
  chmod +x $BUILD_DIR/tomcat/bin/*.sh
  echo " done"
else
  echo "-----> Tomcat already present"
fi

# install maven with base repository
MAVEN_URL="http://s3.amazonaws.com/heroku-jvm-langpack-java/maven.tar.gz"

if [ ! -d .maven ]; then
  echo -n "-----> Installing Maven 3.0.3..."
  curl --silent --max-time 60 --location $MAVEN_URL | tar xz
  chmod +x .maven/bin/mvn
  echo " done"
fi

MAVEN_SETTINGS_URL="http://s3.amazonaws.com/heroku-jvm-langpack-java/settings.xml"

echo -n "-----> Installing settings.xml..."
if [ -f .m2/settings.xml ]; then
  rm .m2/settings.xml 
fi
curl --silent --max-time 10 --location $MAVEN_SETTINGS_URL --output .m2/settings.xml
echo " done"


########## NODE.JS STUFF ##########

NPM_DIR="" # can be overridden in .env to specify where package.json/node_modules are
test -f $BUILD_DIR/.env && source $BUILD_DIR/.env

if [ ! -f $BUILD_DIR/$NPM_DIR/package.json ]; then
  echo 'PRO TIP: If you have a package.json in your project, you can define its location in .env file. Just add the line:'
  echo 'export NPM_DIR=subdir'
  echo 'where subdir is a relative path to the directory where package.json is.'
  semver_range=""
else
  # Look in package.json's engines.node field for a semver range
  semver_range=$(cat $BUILD_DIR/$NPM_DIR/package.json | $BIN_DIR/../vendor/jq -r .engines.node)
fi

# Resolve node version using semver.io
node_version=$(curl --silent --get --data-urlencode "range=${semver_range}" https://semver.io/node/resolve)

# Download node from Heroku's S3 mirror of nodejs.org/dist
echo -n "-----> Downloading and installing node v$node_version..."
node_url="http://s3pository.heroku.com/node/v$node_version/node-v$node_version-linux-x64.tar.gz"
curl $node_url -s -o - | tar xzf - -C $BUILD_DIR
echo " done"

# Move node (and npm) into ./vendor and make them executable
mkdir -p $BUILD_DIR/vendor
mv $BUILD_DIR/node-v$node_version-linux-x64 $BUILD_DIR/vendor/node
chmod +x $BUILD_DIR/vendor/node/bin/*
PATH=$PATH:$BUILD_DIR/vendor/node/bin

# Run subsequent node/npm commands from the build path
cd $BUILD_DIR/$NPM_DIR

# If node_modules directory is checked into source control then
# rebuild any native deps. Otherwise, restore from the build cache.
if test -d $BUILD_DIR/$NPM_DIR/node_modules; then
  echo "-----> Found existing node_modules directory; skipping cache"
  echo "-----> Rebuilding any native dependencies"
  npm rebuild 2>&1 | sed -u 's/^/      /'
elif test -d $CACHE_DIR/node_modules; then
  echo "-----> Restoring node_modules directory from cache"
  cp -r $CACHE_DIR/node_modules $BUILD_DIR/$NPM_DIR/node_modules

  echo "-----> Pruning cached dependencies not specified in package.json"
  npm prune 2>&1 | sed -u 's/^/      /'
fi

if [ -f "$BUILD_DIR/$NPM_DIR/package.json" ]; then
  echo "-----> Running npm install..."
  npm install --production --userconfig $BUILD_DIR/$NPM_DIR/.npmrc 2>&1 | sed -u 's/^/      /'
fi

########## NODE.JS STUFF ENDS ##########



# change to build dir to run maven
cd $BUILD_DIR

export MAVEN_OPTS="-Xmx512m"

# build app
BUILDCMD="$CACHE_DIR/.maven/bin/mvn -B -Duser.home=$BUILD_DIR -Dmaven.repo.local=$CACHE_DIR/.m2/repository -s $CACHE_DIR/.m2/settings.xml -DskipTests=true clean install"
echo "-----> executing $BUILDCMD"

$BUILDCMD 2>&1 | sed -u 's/^/       /'

if [ "${PIPESTATUS[*]}" != "0 0" ]; then
  echo " !     Failed to build app with Maven"
  exit 1
fi

# finalize cache
if [ "false" == $KEEP_M2_CACHE ]; then
  touch $CACHE_DIR/removeM2Cache
fi

#copy .m2 and .maven if needed
if [ "true" == $KEEP_M2_CACHE ]; then
  for DIR in ".m2" ".maven" ; do
    cp -r $CACHE_DIR/$DIR $DIR
  done
fi

logger -p user.notice -t "slugc[$$]" "language_pack_java java_compile_end $LOGGER_FLAGS"
